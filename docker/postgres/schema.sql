DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS projects;
DROP TABLE IF EXISTS project_statuses;
DROP TABLE IF EXISTS projects_users_roles;
DROP TABLE IF EXISTS issues;
DROP TABLE IF EXISTS comments;
DROP TABLE IF EXISTS attachments;
DROP TABLE IF EXISTS issue_types;
DROP TABLE IF EXISTS issue_priorities;
DROP TABLE IF EXISTS issue_statuses;

CREATE TABLE users
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    username            TEXT NOT NULL UNIQUE CHECK(length(username) <= 64),
    password            TEXT NOT NULL CHECK(length(password) <= 512),
    avatar              BYTEA,
    registration_date   DATE NOT NULL,
    bio                 TEXT CHECK(length(bio) <= 1024)
);

CREATE TABLE roles
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL UNIQUE CHECK(length(name) <= 64)
);

CREATE TABLE project_statuses
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL UNIQUE CHECK(length(name) <= 64)
);

CREATE TABLE projects
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title               TEXT NOT NULL UNIQUE CHECK(length(title) <= 128),
    description         TEXT CHECK(length(description) <= 4096),
    status_id           BIGINT NOT NULL REFERENCES project_statuses(ID),
    owner_id            BIGINT NOT NULL REFERENCES users(ID),
    created_date        DATE NOT NULL,
    updated_date        TIMESTAMP,
    closed_date         DATE
);

CREATE TABLE projects_users_roles
(
   project_id           BIGINT NOT NULL REFERENCES projects(ID),
   user_id              BIGINT NOT NULL REFERENCES users(id),
   role_id              BIGINT NOT NULL REFERENCES roles(id)
);

CREATE TABLE issue_types
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL UNIQUE CHECK(length(name) <= 64)
);

CREATE TABLE issue_priorities
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL UNIQUE CHECK(length(name) <= 64)
);

CREATE TABLE issue_statuses
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL UNIQUE CHECK(length(name) <= 64)
);

CREATE TABLE issues
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title               TEXT NOT NULL CHECK(length(title) <= 128),
    description         TEXT CHECK(length(description) <= 4096),
    type_id             BIGINT NOT NULL REFERENCES issue_types(id),
    status_id           BIGINT NOT NULL REFERENCES issue_statuses(id),
    priority_id         BIGINT NOT NULL REFERENCES issue_priorities(id),
    project_id          BIGINT NOT NULL REFERENCES projects(id),
    assignee_id         BIGINT NOT NULL REFERENCES users(id),
    reporter_id         BIGINT NOT NULL REFERENCES users(id),
    created_date        DATE NOT NULL,
    updated_date        TIMESTAMP,
    closed_date         DATE,
    due_date            DATE,
    estimated_time      SMALLINT,
    logged_time         SMALLINT
);

CREATE TABLE comments
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id             BIGINT NOT NULL REFERENCES users(id),
    issue_id            BIGINT NOT NULL REFERENCES issues(id),
    text                TEXT NOT NULL CHECK(length(text) <= 4096),
    created_date        TIMESTAMP NOT NULL,
    updated_date        TIMESTAMP
);

CREATE TABLE attachments
(
    id                  BIGINT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name                TEXT NOT NULL CHECK(length(name) <= 64),
    data                BYTEA NOT NULL,
    issue_id            BIGINT NOT NULL REFERENCES issues(id),
    uploaded_date       TIMESTAMP NOT NULL
);

CREATE TABLE subtasks
(
	parent_id				BIGINT NOT NULL REFERENCES issues(id),
	child_id				BIGINT NOT NULL REFERENCES issues(id)
);